/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proectofinal.Damas;

import com.mycompany.proectofinal.Menu;
import com.mycompany.proectofinal.PartidasGuardadas;
import com.mycompany.proectofinal.Usuarios;
import com.mycompany.proectofinal.Util;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.Timer;



/**
 *
 * @author Juancho956
 */
public class Damas extends javax.swing.JFrame {
public Timer tiempo;
String Tablero[][] = new String[8][8];
String nombres [] = new String[50];
String Jugador1 = "";
String Jugador2 = "";
int piezasComidasJ1 = 0;
int piezasComidasJ2 = 0;
int noPartida = 0;
int CantJugadores = 1;
int partidasGuardadas = PartidasGuardadas.getNoPartidas();;
int NewXLocation = 0;
int NewYLocation = 0;
int XLocation = 0;
int YLocation = 0;
int mov = 1;
int segundos = 0;
int minutos = 0;
boolean negras;
boolean J1=true;
private JButton imagen [][];
boolean Reina [][] = new boolean[8][8];
ImageIcon IconoRojo = new ImageIcon("C:\\Users\\Juancho956\\Documents\\Ejercicios Progra 2022\\Progra 2022\\Ejercicios Abril\\ProectoFinal\\src\\main\\java\\Imagenes\\puntorojo.png");
ImageIcon IconoNegro = new ImageIcon("C:\\Users\\Juancho956\\Documents\\Ejercicios Progra 2022\\Progra 2022\\Ejercicios Abril\\ProectoFinal\\src\\main\\java\\Imagenes\\puntonegro.png");
ImageIcon ENegro = new ImageIcon("C:\\Users\\Juancho956\\Documents\\Ejercicios Progra 2022\\Progra 2022\\Ejercicios Abril\\ProectoFinal\\src\\main\\java\\Imagenes\\espacionegro.png");
ImageIcon EBlanco = new ImageIcon("C:\\Users\\Juancho956\\Documents\\Ejercicios Progra 2022\\Progra 2022\\Ejercicios Abril\\ProectoFinal\\src\\main\\java\\Imagenes\\espacioblanco.png");

                


    /**
     * Creates new form Damas
     */
    public Damas() {
        initComponents();
        PintarBotones();
        nombresList();
        int a = PartidasGuardadas.getNoPartidas();
        if(a > 0){
            BotonCargar.setEnabled(true);
        }else{
            BotonCargar.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        ListaJ1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        ListaJ2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        Label1 = new javax.swing.JLabel();
        GuardarPartidaButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        BotonCargar = new javax.swing.JButton();
        Juga1 = new javax.swing.JLabel();
        Juga2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));

        Panel.setBackground(new java.awt.Color(153, 255, 204));
        Panel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Panel.setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
        Panel.setLayout(PanelLayout);
        PanelLayout.setHorizontalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        PanelLayout.setVerticalGroup(
            PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        ListaJ1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IA" }));
        ListaJ1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListaJ1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Jugador 1");

        ListaJ2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IA" }));
        ListaJ2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListaJ2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Jugador 2");

        jButton2.setText("Jugar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Label1.setText("Tiempo:");

        GuardarPartidaButton.setText("Guardar Partida");
        GuardarPartidaButton.setEnabled(false);
        GuardarPartidaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarPartidaButtonActionPerformed(evt);
            }
        });

        jButton3.setText("Atras â†©");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        BotonCargar.setText("Cargar Partida");
        BotonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCargarActionPerformed(evt);
            }
        });

        Juga1.setText("Jugador: ");

        Juga2.setText("Jugador: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Juga2, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(Juga1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(Label1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(BotonCargar)
                                .addComponent(GuardarPartidaButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ListaJ1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ListaJ2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(0, 285, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton3))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(Juga2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Juga1)
                .addGap(67, 67, 67))
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3)
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ListaJ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ListaJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jButton2)
                .addGap(21, 21, 21)
                .addComponent(Label1)
                .addGap(70, 70, 70)
                .addComponent(GuardarPartidaButton)
                .addGap(18, 18, 18)
                .addComponent(BotonCargar)
                .addGap(0, 137, Short.MAX_VALUE))
        );

        Panel.getAccessibleContext().setAccessibleDescription("");
        Panel.getAccessibleContext().setAccessibleParent(Panel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListaJ1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListaJ1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ListaJ1ActionPerformed

    private void ListaJ2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListaJ2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ListaJ2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ImagenesBotones();
        String J1 = ListaJ1.getSelectedItem().toString();
        String J2 = ListaJ2.getSelectedItem().toString();
        int turno = Util.generateRandomNumber(0,1);
        if (turno == 0){
            JOptionPane.showMessageDialog(null, "Empieza " + J1 + " con las Fichas negras");
            Jugador1 = J1;
            Jugador2 = J2;
        }else{
            JOptionPane.showMessageDialog(null, "Empieza " + J2 + " con las Fichas negras");
            Jugador1 = J2;
            Jugador2 = J1;
        }
        tiempo();
        moverPieza();
        GuardarPartidaButton.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed
       

    private void GuardarPartidaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarPartidaButtonActionPerformed
        for(int y = 0 ; y < 8; y++){
            for(int x = 0 ; x < 8; x++){
                PartidasGuardadas.GUARDAR(x, y, partidasGuardadas, Tablero[x][y],Jugador1,Jugador2);
                System.out.print(Tablero[x][y] + " ");
            }
            System.out.print("");
        }
        PartidasGuardadas.setNoPartidas();
    }//GEN-LAST:event_GuardarPartidaButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.setVisible(false);
        Menu c = new Menu();
        c.setVisible(true);
        JOptionPane.showMessageDialog(null, "REPORTES: " + "\n Jugador: " + Jugador1 +" Comio: " + PartidasGuardadas.getComidasJ1(noPartida) + "\n Jugador: " + Jugador2 +" Comio: " + PartidasGuardadas.getComidasJ2(noPartida) );
    }//GEN-LAST:event_jButton3ActionPerformed

    private void BotonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCargarActionPerformed
        noPartida = Integer.parseInt(JOptionPane.showInputDialog(null,"Ingrese el numero de partida que quiere cargar"));
        for(int y = 0; y < 8; y++){
            for(int x = 0; x < 8; x++){
                Tablero[x][y] = PartidasGuardadas.CARGARTablero(x, y, noPartida);
                System.out.print(Tablero[x][y] + " ");
                imagen[x][y].setEnabled(true);
            }    
        System.out.println(" ");
        }    
        Jugador1 = PartidasGuardadas.CARGARJ1(noPartida);
        Jugador2 = PartidasGuardadas.CARGARJ2(noPartida);
        ImagenesBotones();
        tiempo();
        moverPieza();
        GuardarPartidaButton.setEnabled(true);
    }//GEN-LAST:event_BotonCargarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Damas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Damas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Damas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Damas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Damas().setVisible(true);
            }
        });
    }
    
    public void tiempo(){
        tiempo = new Timer (1000,null);
        tiempo.start();
        
        tiempo.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                if (segundos == 60){
                    minutos++;
                    segundos = 0;
                }
                Label1.setText("Tiempo: " + minutos + ":" + segundos);
                segundos = segundos + 1;
                if(partidasGuardadas > 0){
                    BotonCargar.setEnabled(true);
                }else{
                    BotonCargar.setEnabled(false);
                }
                Juga1.setText("Jugador: " +Jugador1);
                Juga2.setText("Jugador: " + Jugador2);
            }
        });
    }
    
    public void nombresList(){
        this.CantJugadores = Usuarios.getCantJugadores();
        for(int X = 0;X < CantJugadores+1; X++){
            this.nombres[X] = Usuarios.EnviarNombre(X);
        }
        for(int X = 0;X < CantJugadores+1; X++){
            ListaJ1.removeAllItems();
            ListaJ2.removeAllItems();
        }
        for(int X = 0;X < CantJugadores+1; X++){
            ListaJ1.addItem(nombres[X]);
            ListaJ2.addItem(nombres[X]);
        }
    }
    
    public void moverPieza(){
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
		imagen[j][i].addActionListener(escuchador);
            }
        }
    }
    ActionListener escuchador = new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent evento) {
            boolean seMueve = true;
            if (mov == 1){
                for (int Y = 0; Y < 8; Y++) {
                    for (int X = 0; X < 8; X++) {
                        if(evento.getSource() == imagen[X][Y]){
                            if(J1 == true){
                                if(Tablero[X][Y] != "blanco"){
                                    if((Tablero[X][Y] == "FNegro")){
                                        NewYLocation = Y;
                                        NewXLocation = X;
                                        imagen[X][Y].setEnabled(false);
                                    }else{
                                        JOptionPane.showMessageDialog(null, "Es turno de las Negras");
                                        mov = 0;
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "Esa Casilla es invalida");
                                    mov = 0;
                                }
                                mov++;
                            }else{
                                if(Tablero[X][Y] != "blanco"){
                                    if((Tablero[X][Y] == "rojo")){
                                        NewYLocation = Y;
                                        NewXLocation = X;
                                        imagen[X][Y].setEnabled(false);
                                    }else{
                                        JOptionPane.showMessageDialog(null, "Es turno de las Rojas");
                                        mov = 0;
                                    }
                                }else{
                                    JOptionPane.showMessageDialog(null, "Esa Casilla es invalida");
                                    mov = 0;
                                }
                                mov++;
                            }
                        }
                    }
                }
            }else{
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        if (J1 == true){
                            if(evento.getSource() == imagen[j][i]){
                                if(Tablero[j][i] == "blanco"){
                                    seMueve = casillaInvalida();
                                }else{
                                    YLocation = NewYLocation;
                                    XLocation = NewXLocation;
                                    NewYLocation = i;
                                    NewXLocation = j;
                                    //JOptionPane.showMessageDialog(null, "Y: " + YLocation + " X: " + XLocation + " New Y: " + NewYLocation + " New X: " + NewXLocation);
                                    if(Reina[XLocation][YLocation] == true){

                                    }else{
                                        if(NewYLocation > YLocation){
                                            seMueve = casillaInvalida();
                                        }else{
                                            if(XLocation==0){
                                                if((Tablero[XLocation+1][YLocation - 1] == "rojo")){
                                                    if((NewXLocation > XLocation + 2)){
                                                        seMueve = casillaInvalida();
                                                    }else{
                                                        if(NewXLocation == XLocation + 2){
                                                            if((Tablero[NewXLocation][NewYLocation] == "rojo")){
                                                                seMueve = casillaInvalida();
                                                            }else{
                                                                seMueve = true;  
                                                                comerPieza();
                                                            }  
                                                        }
                                                        if((Tablero[NewXLocation][NewYLocation] == "rojo")){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            seMueve = true;
                                                        }  
                                                    }
                                                }else{
                                                    if((NewXLocation > XLocation + 1)||(NewXLocation < XLocation - 1)){
                                                        seMueve = casillaInvalida();
                                                    }else{
                                                        seMueve = true;    
                                                    }
                                                }
                                            }else{
                                                if(XLocation == 7){
                                                    if((Tablero[XLocation-1][YLocation-1] == "rojo")){
                                                        if((NewXLocation < XLocation - 2)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            if(NewXLocation == XLocation - 2){
                                                                if((Tablero[NewXLocation][NewYLocation] == "rojo")){
                                                                    seMueve = casillaInvalida();
                                                                }else{
                                                                    seMueve = true;  
                                                                    comerPieza(); 
                                                                }  
                                                            }
                                                            if((Tablero[NewXLocation][NewYLocation] == "rojo")){
                                                                seMueve = casillaInvalida();
                                                            }else{
                                                                seMueve = true;
                                                            }  
                                                        }
                                                    }else{
                                                        if((NewXLocation > XLocation - 1)||(NewXLocation < XLocation - 1)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            seMueve = true;
                                                        }
                                                    }
                                                }else{
                                                    if((Tablero[XLocation+1][YLocation-1] == "rojo")||(Tablero[XLocation-1][YLocation-1] == "rojo")){
                                                        if((NewXLocation > XLocation + 2)||(NewXLocation < XLocation - 2)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            if((NewXLocation == XLocation + 2)||(NewXLocation == XLocation - 2)){
                                                                if((Tablero[NewXLocation][NewYLocation] == "rojo")||(Tablero[NewXLocation][NewYLocation] == "rojo")){
                                                                    seMueve = casillaInvalida();
                                                                }else{
                                                                    seMueve = true;  
                                                                    comerPieza();
                                                                }  
                                                            }
                                                            if((Tablero[NewXLocation][NewYLocation] == "rojo")||(Tablero[NewXLocation][NewYLocation] == "rojo")){
                                                                seMueve = casillaInvalida();
                                                            }else{
                                                                seMueve = true;
                                                            }  
                                                        }
                                                    }else{
                                                        if((NewXLocation > XLocation + 1)||(NewXLocation < XLocation - 1)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            seMueve = true;    
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }else{
                            if(evento.getSource() == imagen[j][i]){
                                if(Tablero[j][i] == "blanco"){
                                    seMueve = casillaInvalida();
                                }else{
                                    YLocation = NewYLocation;
                                    XLocation = NewXLocation;
                                    NewYLocation = i;
                                    NewXLocation = j;
                                    //JOptionPane.showMessageDialog(null, "Y: " + YLocation + " X: " + XLocation + " New Y: " + NewYLocation + " New X: " + NewXLocation);
                                    if(Reina[XLocation][YLocation] == true){

                                    }else{
                                        if(NewYLocation < YLocation){
                                            seMueve = casillaInvalida();
                                        }else{
                                            if(XLocation==0){
                                                if((Tablero[XLocation+1][YLocation + 1] == "FNegro")){
                                                    if((NewXLocation > XLocation + 2)){
                                                        seMueve = casillaInvalida();
                                                    }else{
                                                        if(NewXLocation == XLocation + 2){
                                                            if((Tablero[NewXLocation][NewYLocation] == "FNegro")){
                                                                seMueve = casillaInvalida();
                                                            }else{
                                                                seMueve = true;  
                                                                comerPieza(); 
                                                            }  
                                                        }
                                                        if((Tablero[NewXLocation][NewYLocation] == "FNegro")){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            seMueve = true;  
                                                        }  
                                                    }
                                                }else{
                                                    if((NewXLocation > XLocation + 1)||(NewXLocation < XLocation + 1)){
                                                        seMueve = casillaInvalida();
                                                    }else{
                                                        seMueve = true;   
                                                    }
                                                }
                                            }else{
                                                if(XLocation == 7){
                                                    if((Tablero[XLocation-1][YLocation+1] == "FNegro")){
                                                        if((NewXLocation < XLocation - 2)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            if(NewXLocation == XLocation - 2){
                                                                if((Tablero[NewXLocation][NewYLocation] == "FNegro")){
                                                                    seMueve = casillaInvalida();
                                                                }else{
                                                                    seMueve = true;  
                                                                    comerPieza();
                                                                } 
                                                            }
                                                            if((Tablero[NewXLocation][NewYLocation] == "FNegro")){
                                                                seMueve = casillaInvalida();
                                                            }else{
                                                                seMueve = true;
                                                            }  
                                                        }
                                                    }else{
                                                        if((NewXLocation < XLocation - 1)||(NewXLocation < XLocation - 1)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            seMueve = true;    
                                                        }
                                                    }
                                                }else{
                                                    if((Tablero[XLocation+1][YLocation+1] == "FNegro")||(Tablero[XLocation-1][YLocation+1] == "FNegro")){
                                                        if((NewXLocation > XLocation + 2)||(NewXLocation < XLocation - 2)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            if((NewXLocation == XLocation + 2)||NewXLocation == XLocation - 2){
                                                                if((Tablero[NewXLocation][NewYLocation] == "FNegro")||(Tablero[NewXLocation][NewYLocation] == "FNegro")){
                                                                    seMueve = casillaInvalida();
                                                                }else{
                                                                    seMueve = true;  
                                                                    comerPieza();
                                                                }  
                                                            }
                                                            if((Tablero[NewXLocation][NewYLocation] == "FNegro")||(Tablero[NewXLocation][NewYLocation] == "FNegro")){
                                                                    seMueve = casillaInvalida();
                                                            }else{
                                                                seMueve = true;  
                                                            }  
                                                        }
                                                    }else{
                                                        if((NewXLocation > XLocation + 1)||(NewXLocation < XLocation - 1)){
                                                            seMueve = casillaInvalida();
                                                        }else{
                                                            seMueve = true;    
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if(seMueve == true){
                    moverNegras(negras);
                    ImagenesBotones();
                    if(J1 == true){
                        J1 = false;
                    }else{
                        J1 = true;
                    }
                    Termino();
                    mov = 1;
                }
            }
        }
    };
    
    public void Termino(){
        int piezasR = 0;
        int piezasN = 0;
        for(int y = 0; y < 8; y++ ){
            for(int x = 0; x < 8; x++ ){
                if(Tablero[x][y] == "rojo"){
                    piezasR++;
                    PartidasGuardadas.setComidasJ1(noPartida, 12 - piezasR);
                }
                if(Tablero[x][y] == "FNegro"){
                    piezasN++;  
                    PartidasGuardadas.setComidasJ2(noPartida, 12 - piezasN);
                }
            }   
        }
        if(piezasR == 0){
            for(int y = 0; y < 8; y++ ){
                for(int x = 0; x < 8; x++ ){
                    if(Tablero[x][y] == "rojo"){
                        imagen[x][y].setEnabled(false);
                    }
                }   
            }
        JOptionPane.showMessageDialog(null, "Game Over! Gano: " + Jugador1);
        for(int x = 0; x < 8; x++ ){
            if(Usuarios.getName(x) == Jugador1){
                Usuarios.setWin(x);
            }
        }
        JOptionPane.showMessageDialog(null, "REPORTES: " + "\n Jugador: " + Jugador1 +" Comio: " + PartidasGuardadas.getComidasJ1(noPartida) + "\n Jugador: " + Jugador2 +" Comio: " + PartidasGuardadas.getComidasJ2(noPartida) );
        }
        if(piezasN == 0){
            for(int y = 0; y < 8; y++ ){
                for(int x = 0; x < 8; x++ ){
                    if(Tablero[x][y] == "FNegro"){
                        imagen[x][y].setEnabled(false);
                    }
                }   
            }
        JOptionPane.showMessageDialog(null, "Game Over! Gano: " + Jugador2);
        }
    }
    
    public boolean casillaInvalida(){
        JOptionPane.showMessageDialog(null, "Esa Casilla es invalida");
        mov = 1;
        imagen[XLocation][YLocation].setEnabled(true);
        return false;
    }
    
    public void comerPieza(){
        if(Tablero[XLocation][YLocation] == "FNegro"){
            if(NewXLocation > XLocation){
                Tablero[NewXLocation - 1][NewYLocation + 1] = "ENegro";
                piezasComidasJ1++;
            }else{
                Tablero[NewXLocation + 1][NewYLocation + 1] = "ENegro";
                piezasComidasJ1++;
            }
            PartidasGuardadas.setComidasJ1(noPartida,piezasComidasJ1);
            ImagenesBotones();
        }else{
            if(NewXLocation > XLocation){
                Tablero[NewXLocation - 1][NewYLocation - 1] = "ENegro";
                piezasComidasJ2++;
            }else{
                Tablero[NewXLocation + 1][NewYLocation - 1] = "ENegro";
                piezasComidasJ2++;
            }
            PartidasGuardadas.setComidasJ2(noPartida,piezasComidasJ2);
            ImagenesBotones();
        }
        
    }
    
    public void moverNegras(boolean NegrasTurn){
        /*if(negras == true){
            if((NewYLocation - 1) >= 0){
                if((NewXLocation - 1) >= 0){
                    
                }
            }*/
            
            
                    //if(((NewYLocation-1)>=0)&&((NewXLocation-1)>=0)&&((NewYLocation+1)>=0)&&((NewYLocation+1)>=0)){
                    //    System.out.println("No Mames no da");
                    //}else{
                        Tablero[NewXLocation][NewYLocation] = Tablero[XLocation][YLocation];
                        Tablero[XLocation][YLocation] = "ENegro";
                    //}
                //}
    }
    
    
    public void ImagenesBotones(){
        for (int Y = 0 ; Y < 8 ; Y++){
            for (int X = 0 ; X < 8; X++){
                        switch (Tablero[X][Y]) {
                        case "rojo":
                        imagen[X][Y].setIcon(IconoRojo);
			break;
                        case "FNegro":
                        imagen[X][Y].setIcon(IconoNegro);
			break;
                        case "ENegro":
                        imagen[X][Y].setIcon(ENegro);
			break;
                        case "blanco":
                        imagen[X][Y].setIcon(EBlanco);
			break;
                        }
                imagen[X][Y].setEnabled(true);
            }
        }
    }
    
    public void PintarBotones() {
        int posX = 50;
        int posY = 50;
        imagen = new JButton[8][8];
        for (int Y = 0 ; Y < 8 ; Y++){
            for (int X = 0 ; X < 8; X++){
                imagen[X][Y] = new JButton();
                imagen[X][Y].setVisible(true);
                imagen[X][Y].setBounds(posX,posY, 50,50);
                this.Panel.add(imagen[X][Y]);
                imagen[X][Y].setEnabled(false);
                if((Y % 2) == 0){
                    if((X%2) == 1){
                        switch (Y) {
                        case 0:
                        Tablero[X][Y] = "rojo";
			break;
                        case 2:
                        Tablero[X][Y] = "rojo";
			break;
                        case 6:
                        Tablero[X][Y] = "FNegro";
			break;
                        
                    default:
                        Tablero[X][Y] = "ENegro";
			break;
	}
                    }else{
                        Tablero[X][Y] = "blanco";
                    }
                }else{
                    
                    if((X%2) == 0){
                        switch (Y) {
                        case 1:
                        Tablero[X][Y] = "rojo";
			break;
                        case 5:
                        Tablero[X][Y] = "FNegro";
			break;
                        case 7:
                        Tablero[X][Y] = "FNegro";
			break;
                    default:
                        Tablero[X][Y] = "ENegro";
			break;
                    }
                    }else{
                        Tablero[X][Y] = "blanco";
                    }
                }
                posX = posX + 50;
            }
            posY = posY + 50;
            posX = 50;
        }
    }
    
    public void Jugar1v1(String name){
        int turno = Util.generateRandomNumber(0,1);
        if (turno == 0){
            JOptionPane.showMessageDialog(null, "Empieza " + nombres [0] + " con las Fichas negras");
            System.out.println(nombres[0]);
        }else{
            JOptionPane.showMessageDialog(null, "Empieza " + nombres [1] + " con las Fichas negras");
            System.out.println(nombres[1]);
        }
        
    }
    
    
    
    
    /**
     *
     * @param url
     * @param boton
     * @return
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonCargar;
    private javax.swing.JButton GuardarPartidaButton;
    private javax.swing.JLabel Juga1;
    private javax.swing.JLabel Juga2;
    private javax.swing.JLabel Label1;
    private javax.swing.JComboBox<String> ListaJ1;
    private javax.swing.JComboBox<String> ListaJ2;
    private javax.swing.JPanel Panel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
